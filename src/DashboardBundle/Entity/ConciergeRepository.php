<?php

namespace DashboardBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
use FOS\UserBundle\Util\PasswordUpdater;

/**
 * ConciergeRepository
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 */
class ConciergeRepository extends EntityRepository
{

    public function getCallList($fullname,$question_id,\DateTime $dateTime = null)
    {
        if (!$dateTime){
            $dateTime = new \DateTime();
            $dateTime->format('Y-m-d');
        }
        $qb = $this
            ->getEntityManager()
            ->createQueryBuilder();

        $future = $qb
            ->select('c1.licenseId')
            ->from('DashboardBundle:Concierge','c1')
            ->join('DashboardBundle:ConciergeAnswers','c2','WITH','c1.conciergeId = c2.concierge')
            ->join('DashboardBundle:ConciergeAnswerList','c3','WITH','c2.answer = c3.answerId and c3.value = :fullname')
            ->Where('c2.question = :question')
            ->andWhere('c1.nextDate > :dateTime or c1.nextDate is null')
            ->addGroupBy("c1.licenseId")
            ->addOrderBy('c1.nextTime','ASC')
            ->setParameters([
                "fullname" => $fullname,
                "dateTime" => $dateTime,
                "question" => $question_id
            ])
            ->getQuery()

        ;

        $futureConcierges = [];
        foreach ($future->getResult() as $license){
            $futureConcierges[] = $license['licenseId'];
        }
        $futureConcierges = implode(',',$futureConcierges);

        $query = $this
            ->getEntityManager()
            ->createQueryBuilder()
                ->select('c1')
                ->from('DashboardBundle:Concierge','c1')
                ->join('DashboardBundle:ConciergeAnswers','c2','WITH','c1.conciergeId = c2.concierge')
                ->join('DashboardBundle:ConciergeAnswerList','c3','WITH','c2.answer = c3.answerId and c3.value = :fullname')
                ->where('c1.nextDate = :dateTime')
                ->andWhere((!empty($futureConcierges))?$qb->expr()->notIn('c1.licenseId',$futureConcierges):null)
            ->addGroupBy("c1.licenseId")
            ->addOrderBy('c1.nextTime','ASC')
            ->setParameters([
                "fullname" => $fullname,
                "dateTime" => $dateTime,
            ])
            ->getQuery()
        ;

        return $query->getResult();
    }

    public function getLastConciergeWithProspectAndLevel($license_id, $team)
    {

        $prospect_status_id = $this
            ->getEntityManager()
            ->createQueryBuilder()
            ->select('cq.questionId')
            ->from('DashboardBundle:ConciergeQuestions','cq')
            ->where('cq.team = :team')
            ->andWhere('cq.value = :prospect')
            ->setParameters([
                "team" => $team,
                "prospect" => "Prospect Status"
            ])
            ->getQuery()
            ->getResult();

        $level_of_interest_id = $this
            ->getEntityManager()
            ->createQueryBuilder()
            ->select('cq.questionId')
            ->from('DashboardBundle:ConciergeQuestions','cq')
            ->where('cq.team = :team')
            ->andWhere('cq.value = :level')
            ->setParameters([
                "team" => $team,
                "level" => "Level of Interest"
            ])
            ->getQuery()
            ->getResult();

        $staff_id = $this
            ->getEntityManager()
            ->createQueryBuilder()
            ->select('cq.questionId')
            ->from('DashboardBundle:ConciergeQuestions','cq')
            ->where('cq.team = :team')
            ->andWhere('cq.value = :level')
            ->setParameters([
                "team" => $team,
                "level" => "Consultant"
            ])
            ->getQuery()
            ->getResult();

        $qb = $this
            ->getEntityManager()
            ->createQueryBuilder();

        $query = $qb
            ->select('c3')
            ->from('DashboardBundle:Concierge','c1')
            ->join('DashboardBundle:ConciergeAnswers','c2','WITH','c1.conciergeId = c2.concierge')
            ->join('DashboardBundle:ConciergeAnswerList','c3','WITH','c2.answer = c3.answerId ')
            ->where('c1.licenseId = :license_id')
            ->andWhere($qb->expr()->in('c2.question',[$prospect_status_id[0]['questionId'],$level_of_interest_id[0]['questionId'],$staff_id[0]['questionId']]))
            ->addOrderBy('c1.conciergeId','DESC')
            ->setParameters([
                "license_id" => $license_id,
            ])
            ->getQuery()
        ;

        $return = [];
        $is_prospect = $is_level = $is_staff = false;
        foreach ($query->getResult() as $result){
            if ($is_level && $is_prospect && $is_staff){
                break;
            }
            /** @var ConciergeAnswerList $result */
            switch ($result->getQuestion()->getQuestionId()){
                case $prospect_status_id[0]['questionId']:
                    if (!$is_prospect){
                        $return[$license_id]['prospect_status'] = $result->getValue();
                        $is_prospect = true;
                    }
                    break;
                case $level_of_interest_id[0]['questionId']:
                    if (!$is_level) {
                        $return[$license_id]['level'] = $result->getValue();
                        $is_level = true;
                    }
                    break;
                case $staff_id[0]['questionId']:
                    if (!$is_staff) {
                        $return[$license_id]['staff'] = $result->getValue();
                        $is_staff = true;
                    }
                    break;
            }
        }

        foreach ($return as $key => $value){
            $return[$key]['status'] = $value['prospect_status'].$value['level'];
            unset($return[$key]['level']);
            unset($return[$key]['prospect_status']);
        }
        return $return;
    }

    public function getConciergeFullData($license_id,$team,$fields = [])
    {
        $fields_id = [];
        $qb = $this
            ->getEntityManager()
            ->createQueryBuilder();

        foreach ($fields as $key => $value){
            $question = $this
                ->getEntityManager()
                ->createQueryBuilder()
                ->select('cq.questionId')
                ->from('DashboardBundle:ConciergeQuestions','cq')
                ->where('cq.team = :team')
                ->andWhere('cq.value = :key')
                ->setParameters([
                    "team" => $team,
                    "key" => $key
                ])
                ->getQuery()
                ->getResult();
            $fields_id[$question[0]['questionId']] = [
                "value" => $value,
                "key" => $key,
                "id" => $question[0]['questionId'],
                "set" => false,
            ];
        }

        $query = $qb
            ->select('c3')
            ->from('DashboardBundle:Concierge','c1')
            ->join('DashboardBundle:ConciergeAnswers','c2','WITH','c1.conciergeId = c2.concierge')
            ->join('DashboardBundle:ConciergeAnswerList','c3','WITH','c2.answer = c3.answerId ')
            ->where('c1.licenseId = :license_id')
            ->andWhere($qb->expr()->in('c2.question',array_keys($fields_id)))
            ->addOrderBy('c1.conciergeId','DESC')
            ->setParameters([
                "license_id" => $license_id,
            ])
            ->getQuery()
        ;

        foreach ($query->getResult() as $result){
            $all_set = 0;
            foreach ($fields_id as $field){
                if ($field['set']){
                    $all_set++;
                }else{
                    $all_set--;
                }
            }
            if ($all_set == count($fields_id)){
                break;
            }
            /** @var ConciergeAnswerList $result */
            foreach ($fields_id as $key => $value){
                if ($key == $result->getQuestion()->getQuestionId()){
                    $fields_id[$key]['data'] = $result->getValue();
                    $fields_id[$key]['set'] = true;
                }
            }
        }
        $return = [];
        foreach ($fields_id as $value){
            $return[$value['value']] = $value['data'];
        }

        return $return;
    }

    public function getConciergeNotes($license_id,$team)
    {
        $notes = [];

        $qb = $this->getEntityManager()->createQueryBuilder();

        $query =$qb
            ->select('c1.date')
            ->addSelect('c1.note')
            ->addSelect('c1.conciergeId')
            ->from('DashboardBundle:Concierge','c1')
            ->join('DashboardBundle:ConciergeAnswers','c2','WITH','c1.conciergeId = c2.concierge')
            ->leftJoin('DashboardBundle:ConciergeAnswerList','c3','WITH','c2.answer = c3.answerId ')
            ->where('c1.licenseId = :license_id')
            ->andWhere('c1.team = :team')
            ->addOrderBy('c1.conciergeId','DESC')
            ->addGroupBy('c1.conciergeId')
            ->setParameters([
                "license_id" => $license_id,
                "team" => $team,
            ])
            ->getQuery()
        ;

        foreach ($query->getResult() as $result){
            $notes[] = [
                "staff" => $this->getAgentForConcierge($result['conciergeId'],$team),
                "date" => $result['date']->format('Y-m-d H:i:s'),
                "note" => $result['note']
            ];
        }

        return $notes;
    }

    public function getAgentForConcierge($concierge_id,$team)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $staff_id = $this
            ->getEntityManager()
            ->createQueryBuilder()
            ->select('cq.questionId')
            ->from('DashboardBundle:ConciergeQuestions','cq')
            ->where('cq.team = :team')
            ->andWhere('cq.value = :level')
            ->setParameters([
                "team" => $team,
                "level" => "Consultant"
            ])
            ->getQuery()
            ->getResult();

        $query =$qb
            ->select('c3.value')
            ->from('DashboardBundle:Concierge','c1')
            ->join('DashboardBundle:ConciergeAnswers','c2','WITH','c1.conciergeId = c2.concierge')
            ->leftJoin('DashboardBundle:ConciergeAnswerList','c3','WITH','c2.answer = c3.answerId ')
            ->where('c1.conciergeId = :concierge_id')
            ->andWhere('c2.question = :question_id')
            ->setParameters([
                "concierge_id" => $concierge_id,
                "question_id" => $staff_id[0]['questionId']
            ])
            ->getQuery()
            ->getResult()
        ;

        return $query[0]['value'];
    }

    public function getAllProspectAndLevel($license_id,$team)
    {
        $prospect_status_id = $this
            ->getEntityManager()
            ->createQueryBuilder()
            ->select('cq.questionId')
            ->from('DashboardBundle:ConciergeQuestions','cq')
            ->where('cq.team = :team')
            ->andWhere('cq.value = :prospect')
            ->setParameters([
                "team" => $team,
                "prospect" => "Prospect Status"
            ])
            ->getQuery()
            ->getResult();

        $level_of_interest_id = $this
            ->getEntityManager()
            ->createQueryBuilder()
            ->select('cq.questionId')
            ->from('DashboardBundle:ConciergeQuestions','cq')
            ->where('cq.team = :team')
            ->andWhere('cq.value = :level')
            ->setParameters([
                "team" => $team,
                "level" => "Level of Interest"
            ])
            ->getQuery()
            ->getResult();

        $staff_id = $this
            ->getEntityManager()
            ->createQueryBuilder()
            ->select('cq.questionId')
            ->from('DashboardBundle:ConciergeQuestions','cq')
            ->where('cq.team = :team')
            ->andWhere('cq.value = :level')
            ->setParameters([
                "team" => $team,
                "level" => "Consultant"
            ])
            ->getQuery()
            ->getResult();

        $qb = $this
            ->getEntityManager()
            ->createQueryBuilder();

        $query = $qb
            ->select('c1.date')
            ->addSelect('c1.conciergeId')
            ->addSelect('c3.value')
            ->addSelect('c4.questionId')
            ->from('DashboardBundle:Concierge','c1')
            ->join('DashboardBundle:ConciergeAnswers','c2','WITH','c1.conciergeId = c2.concierge')
            ->join('DashboardBundle:ConciergeAnswerList','c3','WITH','c2.answer = c3.answerId ')
            ->join('DashboardBundle:ConciergeQuestions','c4','WITH','c3.question = c4.questionId ')
            ->where('c1.licenseId = :license_id')
            ->andWhere($qb->expr()->in('c2.question',[$prospect_status_id[0]['questionId'],$level_of_interest_id[0]['questionId'],$staff_id[0]['questionId']]))
            ->addOrderBy('c1.conciergeId','ASC')
            ->setParameters([
                "license_id" => $license_id,
            ])
            ->getQuery()
        ;

        $return = [];
        foreach ($query->getResult() as $result){
            /** @var ConciergeAnswerList $result */
            switch ($result['questionId']){
                case $prospect_status_id[0]['questionId']:
                        $return[$result['conciergeId']]['prospect_status'] = $result['value'];
                    break;
                case $level_of_interest_id[0]['questionId']:
                        $return[$result['conciergeId']]['level'] = $result['value'];
                    break;
                case $staff_id[0]['questionId']:
                        $return[$result['conciergeId']]['staff'] = $result['value'];
                    break;
            }
            $return[$result['conciergeId']]['date'] = $result['date']->format('Y-m-d H:i:s');
        }

        foreach ($return as $key => $value){
            $return[$key]['status'] = $value['prospect_status'].$value['level'];
            unset($return[$key]['level']);
            unset($return[$key]['prospect_status']);
        }
        return $return;
    }

    public function exportAll($team,$licenses,$exampleArray)
    {

        $qb = $this->getEntityManager()->createQueryBuilder();

        $team = $this
            ->getEntityManager()
            ->createQueryBuilder()
            ->select('t')
            ->from('DashboardBundle:Teams','t')
            ->where("t.type = 'staff'")
            ->andWhere("t.name = :team")
            ->setParameter("team",$team)
            ->getQuery()
            ->getResult();


        $query = $qb
            ->select('c')
            ->from('DashboardBundle:Concierge','c')
            ->where('c.team = :team')
            ->andWhere($qb->expr()->in('c.licenseId',$licenses))
            ->orderBy('c.conciergeId','DESC')
            ->setParameter("team",$team)
            ->getQuery()
        ;

        $return = [];

        foreach ($query->getResult() as $concierge){
            /** @var Concierge $concierge */
            $return[$concierge->getLicenseId()] = $exampleArray;
            foreach ($concierge->toArray() as $key => $value){
                if (array_key_exists($key,$return[$concierge->getLicenseId()])) {
                    if ($return[$concierge->getLicenseId()][$key]) {
                        continue;
                    } else {
                        $return[$concierge->getLicenseId()][$key] = $value;
                    }
                }
            }
            foreach ($concierge->getAnswers() as $answer) {
                /** @var ConciergeAnswers $answer */
                if (array_key_exists($answer->getQuestion()->getValue(),$return[$concierge->getLicenseId()])) {
                    if ($return[$concierge->getLicenseId()][$answer->getQuestion()->getValue()]) {
                        continue;
                    } else {
                        $return[$concierge->getLicenseId()][$answer->getQuestion()->getValue()] = $answer->getAnswer()->getValue();
                    }
                }
            }
            $tags = [];
            foreach ($concierge->getTags() as $tag) {
                /** @var ConciergeAnswerTags $tag */
                $tags[] = $tag->getTag()->getIcTag();
            }
            $currentTags = ($return[$concierge->getLicenseId()]["tags"])?explode(",",$return[$concierge->getLicenseId()]):[];
            foreach ($tags as $tag){
                if (!in_array($tag,$currentTags)){
                    $currentTags[] = $tag;
                }
            }
            $return[$concierge->getLicenseId()]["tags"] = implode(',',$currentTags);
        }

        return $return;
    }

    public function getAgentName(Concierge $concierge)
    {
        $answers = $concierge->getAnswers();

        $agent = null;
        foreach ($answers as $answer){
            /** @var ConciergeAnswers $answer */
            $question_value = $answer->getAnswer()->getQuestion()->getValue();
            if ($question_value == "Consultant"){
                $agent = $answer->getAnswer()->getValue();
            }else{
                continue;
            }
        }
        return $agent;
    }
}
